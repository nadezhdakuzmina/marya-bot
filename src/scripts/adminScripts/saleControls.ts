import renderList from '@utils/renderList';

import type { Script, Scripts, TelegramCore } from '@modules/core';
import type { Sale, UserData } from '@modules/users';
import type { Message } from 'node-telegram-bot-api';
import type { Context } from '../types';
import type { CreateScriptParams } from './types';

enum Commands {
  GiveSale = '–ü–æ–¥–∞—Ä–∏—Ç—å —Å–∫–∏–¥–∫—É',
  SetMainSale = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É',
  SetReferalBonusPercent = '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç',
  SelectUser = '–í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
  AllUsers = '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
  GoBack = 'üëà –ù–∞–∑–∞–¥',
  Cancel = '–û—Ç–º–µ–Ω–∞',
  Skip = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
  AllRight = '–í—Å–µ –≤–µ—Ä–Ω–æ',
  Yes = '–î–∞',
  No = '–ù–µ—Ç',
  Any = '*',
}

function createSaleControls(this: Context, params: CreateScriptParams): Script {
  const { config } = this;
  const { users, helpMessage, adminMenu } = params;

  const getHelpMessage = () => {
    const { referalBonusPercent, referalSale } = config.settings;

    const bonusPercent = Math.floor(referalBonusPercent * 100);
    const initSale = Math.floor(referalSale * 100);

    return (
      '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π:*\n' +
      '\n' +
      `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã –±–æ–Ω—É—Å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç - ${bonusPercent}%\n` +
      `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É - ${initSale}%\n` +
      '\n' +
      '*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n' +
      '\n' +
      renderList([
        Commands.GiveSale,
        Commands.SetMainSale,
        Commands.SetReferalBonusPercent,
      ]) +
      '\n\n' +
      `${Commands.GoBack}`
    );
  };

  const keyboard = [
    [{ text: Commands.GiveSale }],
    [{ text: Commands.SetMainSale }],
    [{ text: Commands.SetReferalBonusPercent }],
    [{ text: Commands.GoBack }],
  ];

  const scripts: Scripts = {
    [Commands.GiveSale](this: TelegramCore, message: Message) {
      const {
        from: { id: userID },
      } = message;

      this.sendMessage(userID, '–ö–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å —Å–∫–∏–¥–∫—É?', [
        [{ text: Commands.SelectUser }, { text: Commands.AllUsers }],
        [{ text: Commands.Cancel }],
      ]);

      let saleName: string;
      let saleValue: number;
      let expiresDate: number;
      let counter: number;
      let highPriority: boolean;
      let selectedUser: UserData;

      const applySales = (): Promise<void> => {
        const newSale: Sale = {
          value: saleValue,
          name: saleName,
          expires: expiresDate,
          counter,
          highPriority,
        };

        if (selectedUser) {
          return users.updateUser(selectedUser.id, {
            sales: [...users.users[selectedUser.id].sales, newSale],
          });
        } else {
          return users.updateUsers((user) => ({
            sales: [...user.sales, newSale],
          }));
        }
      };

      const configureSaleScript: Script = {
        text: '–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–∫–∏–¥–∫–∞?',
        catchMessage: (message: Message) => {
          const { text } = message;

          if (saleName && text === Commands.AllRight) {
            return;
          }

          saleName = text;

          this.sendMessage(
            userID,
            `C–∫–∏–¥–∫–∞ - ${saleName}\n` +
              '–ï—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏',
            [[{ text: Commands.AllRight }]]
          );

          return false;
        },
        onText: {
          [Commands.Any]: {
            text: '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç 0 –¥–æ 99 (%)',
            catchMessage: (message: Message) => {
              const { text } = message;

              if (saleValue && text === Commands.AllRight) {
                return;
              }

              if (!/^\d{1,2}$/.exec(text)) {
                this.sendMessage(
                  userID,
                  '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99 (%)'
                );
                return false;
              }

              saleValue = Number(text) / 100;

              this.sendMessage(
                userID,
                `C–∫–∏–¥–∫–∞ - ${Math.floor(saleValue * 100)}%\n` +
                  '–ï—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                [[{ text: Commands.AllRight }]]
              );

              return false;
            },
            onText: {
              [Commands.Any]: {
                text: '–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì) –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ',
                keyboard: [[{ text: Commands.Skip }]],
                catchMessage: (message: Message) => {
                  const { text } = message;

                  if (text === Commands.Skip) {
                    expiresDate = null;
                    return;
                  }

                  if (expiresDate && text === Commands.AllRight) {
                    return;
                  }

                  if (!/^\d{2}\.\d{2}\.\d{4}$/.exec(text)) {
                    this.sendMessage(
                      userID,
                      '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì',
                      [[{ text: Commands.Skip }]]
                    );

                    return false;
                  }

                  expiresDate = new Date(text).getTime();

                  this.sendMessage(
                    userID,
                    `–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è - ${text}\n` +
                      '–ï—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É',
                    [[{ text: Commands.AllRight }], [{ text: Commands.Skip }]]
                  );

                  return false;
                },
                onText: {
                  [Commands.Any]: {
                    text: '–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ',
                    keyboard: [[{ text: Commands.Skip }]],
                    catchMessage: (message: Message) => {
                      const { text } = message;

                      if (text === Commands.Skip) {
                        counter = null;
                        return;
                      }

                      if (counter && text === Commands.AllRight) {
                        return;
                      }

                      if (!/^\d+$/.exec(text)) {
                        this.sendMessage(
                          userID,
                          '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0',
                          [[{ text: Commands.Skip }]]
                        );

                        return false;
                      }

                      counter = Number(text);

                      this.sendMessage(
                        userID,
                        `–°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π - ${counter}\n` +
                          '–ï—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ',
                        [
                          [{ text: Commands.AllRight }],
                          [{ text: Commands.Skip }],
                        ]
                      );

                      return false;
                    },
                    onText: {
                      [Commands.Any]: {
                        text: '–ù—É–∂–µ–Ω –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø—Ä–∏–æ—Ç–∏—Ç–µ—Ç —Å–∫–∏–¥–∫–∏?',
                        keyboard: [
                          [{ text: Commands.Yes }, { text: Commands.No }],
                        ],
                        catchMessage: async (
                          message: Message
                        ): Promise<false | void> => {
                          const { text } = message;

                          if (text === Commands.Yes) {
                            highPriority = true;
                          } else if (text === Commands.No) {
                            highPriority = false;
                          } else {
                            this.sendMessage(
                              userID,
                              '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª–∞, –Ω–∞–ø–∏—à–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç',
                              [[{ text: Commands.Yes }, { text: Commands.No }]]
                            );

                            return false;
                          }

                          await applySales();
                          this.sendMessage(userID, '–°–∫–∏–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
                        },
                        onText: {
                          [Commands.Any]: {
                            text: getHelpMessage,
                            onText: params.scripts,
                            keyboard: adminMenu,
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      };

      return {
        [Commands.AllUsers]: configureSaleScript,
        [Commands.SelectUser]: {
          text: '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏',
          keyboard: [[{ text: Commands.Cancel }]],
          catchMessage: (message: Message) => {
            const {
              text,
              from: { id: userID },
            } = message;

            if (selectedUser && text === Commands.AllRight) {
              return;
            }

            const usersList = users.findUsers(text);

            if (!usersList.length) {
              this.sendMessage(
                userID,
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!',
                [[{ text: Commands.Cancel }]]
              );
              return false;
            }

            const user = usersList[0];
            selectedUser = user;

            this.sendMessage(
              userID,
              `–°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.fullName}\n–£–∫–∞–∂–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ`,
              [[{ text: Commands.AllRight }]]
            );
            return false;
          },
          onText: {
            [Commands.Any]: configureSaleScript,
            [Commands.Cancel]: {
              text: getHelpMessage,
              onText: params.scripts,
              keyboard: adminMenu,
            },
          },
        },
        [Commands.Cancel]: {
          text: getHelpMessage,
          onText: params.scripts,
          keyboard: adminMenu,
        },
      };
    },
    [Commands.SetMainSale]: {
      text: '–£–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (%)',
      async catchMessage(
        this: TelegramCore,
        message: Message
      ): Promise<false | void> {
        const {
          text,
          from: { id: userID },
        } = message;

        if (!/^\d{1,2}$/.exec(text)) {
          this.sendMessage(
            userID,
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99 (%)'
          );
          return false;
        }

        await config.updateSettings({
          referalSale: Number(text) / 100,
        });

        this.sendMessage(userID, '–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      },
      onText: {
        [Commands.Any]: {
          text: getHelpMessage,
          keyboard: adminMenu,
          onText: params.scripts,
        },
      },
    },
    [Commands.SetReferalBonusPercent]: {
      text: '–£–∫–∞–∂–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ (%)',
      async catchMessage(
        this: TelegramCore,
        message: Message
      ): Promise<false | void> {
        const {
          text,
          from: { id: userID },
        } = message;

        if (!/^\d{1,2}$/.exec(text)) {
          this.sendMessage(
            userID,
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99 (%)'
          );
          return false;
        }

        await config.updateSettings({
          referalBonusPercent: Number(text) / 100,
        });

        this.sendMessage(userID, '–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      },

      onText: {
        [Commands.Any]: {
          text: getHelpMessage,
          keyboard: adminMenu,
          onText: params.scripts,
        },
      },
    },
    [Commands.GoBack]: {
      text: helpMessage,
      keyboard: adminMenu,
      onText: params.scripts,
    },
    [Commands.Any]: {
      text: '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª–∞',
      onText: params.scripts,
      keyboard: adminMenu,
    },
  };

  return {
    text: getHelpMessage,
    onText: scripts,
    keyboard,
  };
}

export default createSaleControls;
