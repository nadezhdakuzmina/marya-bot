import type { Script, TelegramCore } from '@modules/core';
import type { Message } from 'node-telegram-bot-api';
import type { CreateScriptParams } from './types';

enum Commands {
  Any = '*',
  Send = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
  GoBack = 'üëà –ù–∞–∑–∞–¥',
}

const createSpammer = (params: CreateScriptParams): Script => {
  const { users, helpMessage, adminMenu, scripts } = params;

  // –ù–µ —Å—Ç–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
  let messageShortcut: string;

  const getText = () => {
    if (messageShortcut) {
      return ['*–ù–∞–π–¥–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫:*', messageShortcut];
    }

    return '–ù–∞–ø–∏—à–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –º—ã –≤–º–µ—Å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π';
  };

  return {
    text: getText,
    keyboard: [
      [
        { text: Commands.GoBack },
        { text: Commands.Send, checkAccess: () => !!messageShortcut },
      ],
    ],
    catchMessage(this: TelegramCore, message: Message) {
      const {
        text,
        from: { id: userID },
      } = message;

      if (text === Commands.GoBack) {
        return;
      }

      if (messageShortcut && text === Commands.Send) {
        Object.keys(users.users).forEach((uidS: string) => {
          const uid = Number(uidS);

          if (uid === userID) {
            return;
          }

          this.sendMessage(uid, messageShortcut);
        });

        this.sendMessage(userID, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
        messageShortcut = null;
        return;
      }

      messageShortcut = text;
      this.sendMessage(userID, '*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:*');
      this.sendMessage(userID, text, [
        [{ text: Commands.GoBack }, { text: Commands.Send }],
      ]);

      return false;
    },
    onText: {
      [Commands.Any]: {
        text: helpMessage,
        keyboard: adminMenu,
        onText: scripts,
      },
    },
  };
};

export default createSpammer;
